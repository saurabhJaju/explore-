rm(dfs)     #clearing space
plts<-ls()  #Plot list
for(i in 1:NoTabs){
df<-data.frame(df1[[i]])
names(df)<-c("Var","Freq")
p1 = mPlot(x = 'Var', y = list('Freq'), data = df, type = 'Bar', labels = list("Count"))
p1$set(hideHover = "auto")
plts[[i]]<-list(p1)
}
plts<-plts[c(1:NoTabs)]
#return(plts[Plotn])
return(plts)
}
############################           Internal function
CoefV<-function(var){
ans=sd(var,na.rm=TRUE)/mean(var,na.rm=TRUE)
return(ans)
}
#################################################  Internal function
CarIntT<-function(df){
names<-names(df)
dfin<-1:dim(df)[1]
dfot<-1:dim(df)[1]
typ<-sapply(df, class)
typ<-as.character(typ)
##integer df
for(i in 1:length(names)){
if(typ[i]=="integer"||typ[i]=="numeric"){
dfin<-cbind(dfin,df[i])
}else{
dfot<-cbind(dfot,df[i])
}
}
}
####################################### Internal function
mysummary<-function(df){
names<-names(df)
dfin<-1:dim(df)[1]
dfot<-1:dim(df)[1]
typ<-sapply(df, class)
typ<-as.character(typ)
##integer df
for(i in 1:length(names)){
if(typ[i]=="integer"||typ[i]=="numeric"){
dfin<-cbind(dfin,df[i])
}else{
dfot<-cbind(dfot,df[i])
}
}
##############################################  creating two different tables
dfin<-data.frame(dfin)
dfot<-data.frame(dfot)
dfin<-dfin[-c(1)]
dfot<-dfot[-c(1)]
##############  Some real satistics
library(moments)
minmy<-round(sapply(dfin,min,na.rm=TRUE),3)
maxmy<-round(sapply(dfin,max,na.rm=TRUE),3)
sdmy<-round(sapply(dfin,sd,na.rm=TRUE),3)
varmy<-round(sapply(dfin,var,na.rm=TRUE),3)
q0my<-round(sapply(dfin,quantile,probs=c(0),na.rm=TRUE),3)
q25my<-round(sapply(dfin,quantile,probs=c(0.25),na.rm=TRUE),3)
q50my<-round(sapply(dfin,quantile,probs=c(0.5),na.rm=TRUE),3)
q75my<-round(sapply(dfin,quantile,probs=c(0.75),na.rm=TRUE),3)
q90my<-round(sapply(dfin,quantile,probs=c(0.9),na.rm=TRUE),3)
q95my<-round(sapply(dfin,quantile,probs=c(0.95),na.rm=TRUE),3)
q100my<-round(sapply(dfin,quantile,probs=c(1),na.rm=TRUE),3)
meanmy<-round(sapply(dfin,mean,na.rm=TRUE),3)
medianmy<-round(sapply(dfin,median,na.rm=TRUE),3)
skewnessmy<-round(sapply(dfin,skewness,na.rm=TRUE),3)
kurtosismy<-round(sapply(dfin,kurtosis,na.rm=TRUE),3)
CoefVmy<-round(sapply(dfin,CoefV),4)
##checking na
naChk<-sapply(dfin,is.na)
naChk<-data.frame(naChk)
naChk<-sapply(naChk,sum)
##no of unique values
numUnq<-sapply(dfin,unique)
numUnq<-sapply(numUnq,length)
##for df int untill now
mysummary<-rbind(CoefVmy,minmy,maxmy,sdmy,varmy,q0my,q25my,q50my,q75my,q90my,q95my,q100my,meanmy,medianmy,skewnessmy,kurtosismy,naChk,numUnq)
return(mysummary)
}
###############################################Internal function
facsummary<-function(df){
names<-names(df)
dfin<-1:dim(df)[1]
dfot<-1:dim(df)[1]
typ<-sapply(df, class)
typ<-as.character(typ)
################################fac df
for(i in 1:length(names)){
if(typ[i]=="integer"||typ[i]=="numeric"){
dfin<-cbind(dfin,df[i])
}else{
dfot<-cbind(dfot,df[i])
}
}
dfot<-data.frame(dfot)
dfot<-dfot[-c(1)]
unqCnt<-sapply(dfot,table)
return(unqCnt)
}
###################################### External function I/P from vertical split
runSummary<-function(lsVS){
if(length(lsVS)>1){
for(i in 1:5){
df1 <- ldply(lsVS[i], data.frame)
if(i==1){report1<-mysummary(df1)
}else if(i==2){report2<-mysummary(df1)
}else if(i==3){report3<-mysummary(df1)
}else if(i==4){report4<-mysummary(df1)
}else {report5<-mysummary(df1)}
rm(df1)
}
return(cbind(report1,report2,report3,report4,report5))
}
else{
df1 <- ldply(lsVS[1], data.frame)
return(mysummary(df1))
}
}
## lsVS = List from vertical split
####################################### External Function i/p from Vertical Split
runFacsummary<-function(lsVS){
if(length(lsVS)>1){
for(i in 1:5){
df1 <- ldply(lsVS[i], data.frame)
if(i==1){report1<-facsummary(df1)
}else if(i==2){report2<-facsummary(df1)
}else if(i==3){report3<-facsummary(df1)
}else if(i==4){report4<-facsummary(df1)
}else if(i==5){report5<-facsummary(df1)}
rm(df1)
}
#####Cant pass 3 lists to append
finalrep<-append(append(report1,report2),append(report3,report4))
return(append(finalrep,report5))
}
else{
df1 <- ldply(lsVS[1], data.frame)
return(facsummary(df1))
}
}
#################################  ###########Internal function outputs lsVS
verticalSplit<-function(df){
if(length(names(df))>30){
x<-1:length(names(df))
n<-5
chunk <- function(x, n) split(x, sort(rank(x) %% n))
attrList<-chunk(x,n)
attrList1<-as.vector(unlist(attrList[1]))
attrList2<-as.vector(unlist(attrList[2]))
attrList3<-as.vector(unlist(attrList[3]))
attrList4<-as.vector(unlist(attrList[4]))
attrList5<-as.vector(unlist(attrList[5]))
##  }
df1<-df[,attrList1]
df2<-df[,attrList2]
df3<-df[,attrList3]
df4<-df[,attrList4]
df5<-df[,attrList5]
rm(df)
rm(attrList1)
rm(attrList2)
rm(attrList3)
rm(attrList4)
rm(attrList5)
return(list(df1,df2,df3,df4,df5))
}##
else{
return(list(df))
}
}
################################################ROUGH
# df1 <- ldply(df[1], data.frame)
# df2 <- ldply(df[2], data.frame)
# df3 <- ldply(df[3], data.frame)
# df4 <- ldply(df[4], data.frame)
# df5 <- ldply(df[5], data.frame)
################################################################# External catering functions
##############User allowed to call these
numericVarSumm<-function(df){
lsVS<-verticalSplit(df)
return(runSummary(lsVS))
}
factorVarSumm<-function(df){
lsVS<-verticalSplit(df)
return(runFacsummary(lsVS))
}
freqBarPlots<-function(df){
lsVS<-verticalSplit(df)
return(barPlots(lsVS))
}
freqPiePlots<-function(df){
lsVS<-verticalSplit(df)
return(piePlots(lsVS))
}
factorVarSumm(a)
freqBarPlots(a)[1]
library(rCharts)
freqBarPlots(a)[1]
piePlots<-function(lsVS){
dfs<-ls()
NoTabs<-length(runFacsummary(lsVS))
for(i in 1:NoTabs){
dfs[[i]]<-list(data.frame(runFacsummary(lsVS)[i]))
}
df1<-dfs[c(1:NoTabs)]
rm(dfs)     #clearing space
plts<-ls()  #Plot list
for(i in 1:NoTabs){
df<-data.frame(df1[[i]])
names(df)<-c("Var","Freq")
h3 = hPlot(x="Var", y ="Freq",data = df,type = "pie") ###changing type from pie
plts[[i]]<-list(h3)
}
plts<-plts[c(1:NoTabs)]
#return(plts[Plotn])
print("# of Plots")
print(length(unlist(plts)))
return(unlist(plts))
}
#######################################BAR CHRT
##################################################### External function
barPlots<-function(lsVS){
dfs<-ls()
NoTabs<-length(runFacsummary(lsVS))
for(i in 1:NoTabs){
dfs[[i]]<-list(data.frame(runFacsummary(lsVS)[i]))
}
df1<-dfs[c(1:NoTabs)]
rm(dfs)     #clearing space
plts<-ls()  #Plot list
for(i in 1:NoTabs){
df<-data.frame(df1[[i]])
names(df)<-c("Var","Freq")
p1 = mPlot(x = 'Var', y = list('Freq'), data = df, type = 'Bar', labels = list("Count"))
p1$set(hideHover = "auto")
plts[[i]]<-list(p1)
}
plts<-plts[c(1:NoTabs)]
#return(plts[Plotn])
return(plts)
}
############################           Internal function
CoefV<-function(var){
ans=sd(var,na.rm=TRUE)/mean(var,na.rm=TRUE)
return(ans)
}
#################################################  Internal function
CarIntT<-function(df){
names<-names(df)
dfin<-1:dim(df)[1]
dfot<-1:dim(df)[1]
typ<-sapply(df, class)
typ<-as.character(typ)
##integer df
for(i in 1:length(names)){
if(typ[i]=="integer"||typ[i]=="numeric"){
dfin<-cbind(dfin,df[i])
}else{
dfot<-cbind(dfot,df[i])
}
}
}
####################################### Internal function
mysummary<-function(df){
names<-names(df)
dfin<-1:dim(df)[1]
dfot<-1:dim(df)[1]
typ<-sapply(df, class)
typ<-as.character(typ)
##integer df
for(i in 1:length(names)){
if(typ[i]=="integer"||typ[i]=="numeric"){
dfin<-cbind(dfin,df[i])
}else{
dfot<-cbind(dfot,df[i])
}
}
##############################################  creating two different tables
dfin<-data.frame(dfin)
dfot<-data.frame(dfot)
dfin<-dfin[-c(1)]
dfot<-dfot[-c(1)]
##############  Some real satistics
library(moments)
minmy<-round(sapply(dfin,min,na.rm=TRUE),3)
maxmy<-round(sapply(dfin,max,na.rm=TRUE),3)
sdmy<-round(sapply(dfin,sd,na.rm=TRUE),3)
varmy<-round(sapply(dfin,var,na.rm=TRUE),3)
q0my<-round(sapply(dfin,quantile,probs=c(0),na.rm=TRUE),3)
q25my<-round(sapply(dfin,quantile,probs=c(0.25),na.rm=TRUE),3)
q50my<-round(sapply(dfin,quantile,probs=c(0.5),na.rm=TRUE),3)
q75my<-round(sapply(dfin,quantile,probs=c(0.75),na.rm=TRUE),3)
q90my<-round(sapply(dfin,quantile,probs=c(0.9),na.rm=TRUE),3)
q95my<-round(sapply(dfin,quantile,probs=c(0.95),na.rm=TRUE),3)
q100my<-round(sapply(dfin,quantile,probs=c(1),na.rm=TRUE),3)
meanmy<-round(sapply(dfin,mean,na.rm=TRUE),3)
medianmy<-round(sapply(dfin,median,na.rm=TRUE),3)
skewnessmy<-round(sapply(dfin,skewness,na.rm=TRUE),3)
kurtosismy<-round(sapply(dfin,kurtosis,na.rm=TRUE),3)
CoefVmy<-round(sapply(dfin,CoefV),4)
##checking na
naChk<-sapply(dfin,is.na)
naChk<-data.frame(naChk)
naChk<-sapply(naChk,sum)
##no of unique values
numUnq<-sapply(dfin,unique)
numUnq<-sapply(numUnq,length)
##for df int untill now
mysummary<-rbind(CoefVmy,minmy,maxmy,sdmy,varmy,q0my,q25my,q50my,q75my,q90my,q95my,q100my,meanmy,medianmy,skewnessmy,kurtosismy,naChk,numUnq)
return(mysummary)
}
###############################################Internal function
facsummary<-function(df){
names<-names(df)
dfin<-1:dim(df)[1]
dfot<-1:dim(df)[1]
typ<-sapply(df, class)
typ<-as.character(typ)
################################fac df
for(i in 1:length(names)){
if(typ[i]=="integer"||typ[i]=="numeric"){
dfin<-cbind(dfin,df[i])
}else{
dfot<-cbind(dfot,df[i])
}
}
dfot<-data.frame(dfot)
dfot<-dfot[-c(1)]
unqCnt<-sapply(dfot,table)
return(unqCnt)
}
###################################### External function I/P from vertical split
runSummary<-function(lsVS){
if(length(lsVS)>1){
for(i in 1:5){
df1 <- ldply(lsVS[i], data.frame)
if(i==1){report1<-mysummary(df1)
}else if(i==2){report2<-mysummary(df1)
}else if(i==3){report3<-mysummary(df1)
}else if(i==4){report4<-mysummary(df1)
}else {report5<-mysummary(df1)}
rm(df1)
}
return(cbind(report1,report2,report3,report4,report5))
}
else{
df1 <- ldply(lsVS[1], data.frame)
return(mysummary(df1))
}
}
## lsVS = List from vertical split
####################################### External Function i/p from Vertical Split
runFacsummary<-function(lsVS){
if(length(lsVS)>1){
for(i in 1:5){
df1 <- ldply(lsVS[i], data.frame)
if(i==1){report1<-facsummary(df1)
}else if(i==2){report2<-facsummary(df1)
}else if(i==3){report3<-facsummary(df1)
}else if(i==4){report4<-facsummary(df1)
}else if(i==5){report5<-facsummary(df1)}
rm(df1)
}
#####Cant pass 3 lists to append
finalrep<-append(append(report1,report2),append(report3,report4))
return(append(finalrep,report5))
}
else{
df1 <- ldply(lsVS[1], data.frame)
return(facsummary(df1))
}
}
#################################  ###########Internal function outputs lsVS
verticalSplit<-function(df){
if(length(names(df))>30){
x<-1:length(names(df))
n<-5
chunk <- function(x, n) split(x, sort(rank(x) %% n))
attrList<-chunk(x,n)
attrList1<-as.vector(unlist(attrList[1]))
attrList2<-as.vector(unlist(attrList[2]))
attrList3<-as.vector(unlist(attrList[3]))
attrList4<-as.vector(unlist(attrList[4]))
attrList5<-as.vector(unlist(attrList[5]))
##  }
df1<-df[,attrList1]
df2<-df[,attrList2]
df3<-df[,attrList3]
df4<-df[,attrList4]
df5<-df[,attrList5]
rm(df)
rm(attrList1)
rm(attrList2)
rm(attrList3)
rm(attrList4)
rm(attrList5)
return(list(df1,df2,df3,df4,df5))
}##
else{
return(list(df))
}
}
################################################ROUGH
# df1 <- ldply(df[1], data.frame)
# df2 <- ldply(df[2], data.frame)
# df3 <- ldply(df[3], data.frame)
# df4 <- ldply(df[4], data.frame)
# df5 <- ldply(df[5], data.frame)
################################################################# External catering functions
##############User allowed to call these
numericVarSumm<-function(df){
lsVS<-verticalSplit(df)
return(runSummary(lsVS))
}
factorVarSumm<-function(df){
lsVS<-verticalSplit(df)
return(runFacsummary(lsVS))
}
freqBarPlots<-function(df){
lsVS<-verticalSplit(df)
return(barPlots(lsVS))
}
freqPiePlots<-function(df){
lsVS<-verticalSplit(df)
return(piePlots(lsVS))
}
freqPiePlots(a)
freqPiePlots(a)[1]
?paste
paste("# of plots",length(x),sep=" ")
library(plyr)
Isumm[1]
Isumm
ex<-data.frame(Isumm)
ex[1]
ex[1,2]
ex[,1]
ex
names(ex)
ex[,1]
dim(ex)
ex[1,]
ex[2,]
as.vector(ex[1,])
as.numeric(ex[1,])
plot(as.numeric(ex[1,]))
covarianceSPlot<-function(quantSummary){
summ<-data.frame(quantSummary)
index<-1:length(variance)
variance<-as.numeric(summ[1,])
feature<-names(summ)
df<-data.frame(index,variance,feature)
n1 <- rPlot(variance ~ index, data = df, color = "feature", type = "point")
return(n1)
}
covarianceSPlot(Isumm)
covarianceSPlot<-function(quantSummary){
summ<-data.frame(quantSummary)
variance<-as.numeric(summ[1,])
index<-1:length(variance)
feature<-names(summ)
df<-data.frame(index,variance,feature)
n1 <- rPlot(variance ~ index, data = df, color = "feature", type = "point")
return(n1)
}
covarianceSPlot(Isumm)
library(rCharts)
covarianceSPlot(Isumm)
covarianceSPlot<-function(quantSummary){
summ<-data.frame(quantSummary)
variance<-as.numeric(summ[1,])
index<-1:length(variance)
feature<-names(summ)
df<-data.frame(index,variance,feature)
df<-df[variance<9,]
n1 <- rPlot(variance ~ index, data = df, color = "feature", type = "point")
return(n1)
}
covarianceSPlot(Isumm)
covarianceSPlot<-function(quantSummary){
summ<-data.frame(quantSummary)
variance<-as.numeric(summ[1,])
index<-1:length(variance)
feature<-names(summ)
df<-data.frame(index,variance,feature)
df<-df[variance<1,]
n1 <- rPlot(variance ~ index, data = df, color = "feature", type = "point")
return(n1)
}
covarianceSPlot(Isumm)
covarianceSPlot<-function(quantSummary){
summ<-data.frame(quantSummary)
variance<-as.numeric(summ[1,])
index<-1:length(variance)
feature<-names(summ)
df<-data.frame(index,variance,feature)
df<-df[variance<1 & variance>-1,]
n1 <- rPlot(variance ~ index, data = df, color = "feature", type = "point")
return(n1)
}
covarianceSPlot(Isumm)
fsumm
library(explore)
library(explore)
?freqBarPlots
library(explore)
library(explore)
library(explore)
