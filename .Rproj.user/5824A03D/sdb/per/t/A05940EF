{
    "contents" : "#' Generating pie charts based on frequency of elements in all qualitative features\n#' \n#' This function develops pie charts of frequency of all Qualitative Variables\n#' \n#' @param lsVS is a list generated by verticalSplit function in this same package\n#' @return a list of pie charts\n#' @author Saurabh\n#' @details\n#' The input to this function is output of verticalSplit function in this package\n#' It outputs a list containing pie chart of frequency of all qualitative variables. \n#' Output must be stored in a variable.\n#' And you could access each single pie chart as outputList[1] or outputList[2]\n#' @import rCharts,reshape2\n#' \n#library(plyr)\n############################## External function\npiePlots<-function(lsVS){\n  dfs<-ls()\n  NoTabs<-length(runFacsummary(lsVS))\n  for(i in 1:NoTabs){\n    dfs[[i]]<-list(data.frame(runFacsummary(lsVS)[i]))\n  }\n  df1<-dfs[c(1:NoTabs)]\n  rm(dfs)     #clearing space\n  plts<-ls()  #Plot list\n  for(i in 1:NoTabs){\n    df<-data.frame(df1[[i]])\n    names(df)<-c(\"Var\",\"Freq\")\n    h3 = hPlot(x=\"Var\", y =\"Freq\",data = df,type = \"pie\") ###changing type from pie\n    plts[[i]]<-list(h3)\n  }\n  plts<-plts[c(1:NoTabs)]\n  #return(plts[Plotn])\n  paste(\"# of Plots\",length(unlist(plts)),sep=\" \")\n  \n  return(unlist(plts))\n}\n\n#######################################BAR CHRT\n##################################################### External function\n# Generating bar plots based on frequency of elements in all qualitative features\n#' \n#' This function develops bar plots of frequency of all Qualitative Variables\n#' \n#' @param lsVS is a list generated by verticalSplit function in this same package\n#' @return a list of bar plots\n#' @author Saurabh\n#' @details\n#' The input to this function is output of verticalSplit function in this package\n#' It outputs a list containing bar plots of frequency of all qualitative variables. \n#' Output must be stored in a variable.\n#' And you could access each single bar plots as outputList[1] or outputList[2]\n#' @import rCharts,reshape2\n#'\n\nbarPlots<-function(lsVS){\n  dfs<-ls()\n  NoTabs<-length(runFacsummary(lsVS))\n  for(i in 1:NoTabs){\n    dfs[[i]]<-list(data.frame(runFacsummary(lsVS)[i]))\n  }\n  df1<-dfs[c(1:NoTabs)]\n  rm(dfs)     #clearing space\n  plts<-ls()  #Plot list\n  for(i in 1:NoTabs){\n    df<-data.frame(df1[[i]])\n    names(df)<-c(\"Var\",\"Freq\")\n    p1 = mPlot(x = 'Var', y = list('Freq'), data = df, type = 'Bar', labels = list(\"Count\"))\n    p1$set(hideHover = \"auto\")\n    plts[[i]]<-list(p1)\n  }\n  plts<-plts[c(1:NoTabs)]\n  #return(plts[Plotn])\n  paste(\"# of Plots\",length(unlist(plts)),sep=\" \")\n  return(plts)\n}\n############################           Internal function\n#'\n#' Calculating coefficient of variance \n#' \n#' \n#' This function calculates Coefficient of variance Quantitative Variables\n#' \n#' @param var any numeric vector\n#' @return Numeric Coefficient of variance\n#' @author Saurabh\n#' @details\n#' Its an internal function\n\nCoefV<-function(var){\n  ans=sd(var,na.rm=TRUE)/mean(var,na.rm=TRUE)\n  return(ans)\n}\n#################################################  Internal function\n#'\n#' Univariate exploration of all \n#' Quantitative Variables in a Dataset\n#' \n#' This function calculates various statistics of Quantitative variables in your data\n#' The function calculates Coef. of variance,min,max,standard deviation,variance, \n#' various qunatiles, mean,median,skewness,kurtosis it also checks if data contains NA's and number of unique values.\n#' @param df a data frame (your dataset)\n#' @return rbound values, can be efficently converted to data frame\n#' @author Saurabh\n#' @details\n#' Its an internal function\n#' @import moments\n#############################################################\n# CarIntT<-function(df){\n#   names<-names(df)\n#   dfin<-1:dim(df)[1]\n#   dfot<-1:dim(df)[1]\n#   typ<-sapply(df, class)\n#   typ<-as.character(typ)\n#   ##integer df\n#   for(i in 1:length(names)){\n#     if(typ[i]==\"integer\"||typ[i]==\"numeric\"){\n#       dfin<-cbind(dfin,df[i])\n#     }else{\n#       dfot<-cbind(dfot,df[i])\n#     }\n#   }\n# }\n####################################### Internal function\nmysummary<-function(df){\n  names<-names(df)\n  dfin<-1:dim(df)[1]\n  dfot<-1:dim(df)[1]\n  typ<-sapply(df, class)\n  typ<-as.character(typ)\n  ##integer df\n  for(i in 1:length(names)){\n    if(typ[i]==\"integer\"||typ[i]==\"numeric\"){\n      dfin<-cbind(dfin,df[i])\n    }else{\n      dfot<-cbind(dfot,df[i])\n    }\n  }\n  ##############################################  creating two different tables\n  dfin<-data.frame(dfin)\n  dfot<-data.frame(dfot)\n  dfin<-dfin[-c(1)]\n  dfot<-dfot[-c(1)]\n  \n  ##############  Some real satistics\n  #library(moments)\n  minmy<-round(sapply(dfin,min,na.rm=TRUE),3)\n  maxmy<-round(sapply(dfin,max,na.rm=TRUE),3)\n  sdmy<-round(sapply(dfin,sd,na.rm=TRUE),3)\n  varmy<-round(sapply(dfin,var,na.rm=TRUE),3)\n  q0my<-round(sapply(dfin,quantile,probs=c(0),na.rm=TRUE),3)\n  q25my<-round(sapply(dfin,quantile,probs=c(0.25),na.rm=TRUE),3)\n  q50my<-round(sapply(dfin,quantile,probs=c(0.5),na.rm=TRUE),3)\n  q75my<-round(sapply(dfin,quantile,probs=c(0.75),na.rm=TRUE),3)\n  q90my<-round(sapply(dfin,quantile,probs=c(0.9),na.rm=TRUE),3)\n  q95my<-round(sapply(dfin,quantile,probs=c(0.95),na.rm=TRUE),3)\n  q100my<-round(sapply(dfin,quantile,probs=c(1),na.rm=TRUE),3)\n  meanmy<-round(sapply(dfin,mean,na.rm=TRUE),3)\n  medianmy<-round(sapply(dfin,median,na.rm=TRUE),3)\n  skewnessmy<-round(sapply(dfin,skewness,na.rm=TRUE),3)\n  kurtosismy<-round(sapply(dfin,kurtosis,na.rm=TRUE),3)\n  CoefVmy<-round(sapply(dfin,CoefV),4)\n  ##checking na\n  naChk<-sapply(dfin,is.na)\n  naChk<-data.frame(naChk)\n  naChk<-sapply(naChk,sum)\n  ##no of unique values\n  numUnq<-sapply(dfin,unique)\n  numUnq<-sapply(numUnq,length)\n  ##for df int untill now\n  mysummary<-rbind(CoefVmy,minmy,maxmy,sdmy,varmy,q0my,q25my,q50my,q75my,q90my,q95my,q100my,meanmy,medianmy,skewnessmy,kurtosismy,naChk,numUnq)\n  return(mysummary)\n}\n\n###############################################Internal function\n#'\n#' Univariate exploration of all \n#' Qualitative Variables in a Dataset\n#' \n#' This function calculates the frequency of various qualitative values\n#' in the data \n#' @param df a data frame (your dataset)\n#' @return List of frequency of all internal values of all qualitative values\n#' @author Saurabh\n#' @details\n#' Its an internal function\n#' \nfacsummary<-function(df){\n  names<-names(df)\n  dfin<-1:dim(df)[1]\n  dfot<-1:dim(df)[1]\n  typ<-sapply(df, class)\n  typ<-as.character(typ)\n  ################################fac df\n  for(i in 1:length(names)){\n    if(typ[i]==\"integer\"||typ[i]==\"numeric\"){\n      dfin<-cbind(dfin,df[i])\n    }else{\n      dfot<-cbind(dfot,df[i])\n    }\n  }\n  dfot<-data.frame(dfot)\n  dfot<-dfot[-c(1)]\n  unqCnt<-sapply(dfot,table)\n  return(unqCnt)\n  \n}\n\n###################################### External function I/P from vertical split\n#'\n#' Executes mysummary function on complete list output by verticalSplit function\n#' \n#' This function calculates various statistics of Quantitative variables in your data\n#' The function calculates Coef. of variance,min,max,standard deviation,variance, \n#' various qunatiles, mean,median,skewness,kurtosis it also checks if data contains NA's and number of unique values.\n#' @param lsVS a list of dataframes produced by verticalSplit function\n#' @return rbound values, can be efficently converted to data frame\n#' @author Saurabh\n#' @details\n#' Its an internal function\n#' @import moments,plyr\nrunSummary<-function(lsVS){\n  #library(plyr)\n  if(length(lsVS)>1){\n  for(i in 1:5){\n    df1 <- ldply(lsVS[i], data.frame)\n    if(i==1){report1<-mysummary(df1)\n    }else if(i==2){report2<-mysummary(df1)\n    }else if(i==3){report3<-mysummary(df1)\n    }else if(i==4){report4<-mysummary(df1)\n    }else {report5<-mysummary(df1)}\n    rm(df1)\n    \n  }\n  return(cbind(report1,report2,report3,report4,report5))\n  }\n  else{\n    df1 <- ldply(lsVS[1], data.frame)\n    return(mysummary(df1))\n  }\n}\n\n## lsVS = List from vertical split\n####################################### External Function i/p from Vertical Split\n#' Executes facsummary function on complete list output by verticalSplit function\n#'  \n#' This function calculates the frequency of various qualitative values\n#' in the data \n#' @param lsVS a list of dataframes produced by verticalSplit function\n#' @return List of frequency of all internal values of all qualitative values\n#' @author Saurabh\n#' @details\n#' Its an internal function\n#' @import plyr\nrunFacsummary<-function(lsVS){ \n # library(plyr)\n  if(length(lsVS)>1){\n  for(i in 1:5){\n    df1 <- ldply(lsVS[i], data.frame)\n    if(i==1){report1<-facsummary(df1)\n    }else if(i==2){report2<-facsummary(df1)\n    }else if(i==3){report3<-facsummary(df1)\n    }else if(i==4){report4<-facsummary(df1)\n    }else if(i==5){report5<-facsummary(df1)}\n    rm(df1)\n  \n  }\n  #####Cant pass 3 lists to append\n  finalrep<-append(append(report1,report2),append(report3,report4))\n  return(append(finalrep,report5))\n  }\n  else{\n    df1 <- ldply(lsVS[1], data.frame)\n    return(facsummary(df1))\n  }\n}\n\n#################################  ###########Internal function outputs lsVS\n#' Splitting of large datasets to more manageable data frames  \n#' \n#' \n#' This function splits a large dataset column wise in more managable chunks of data frames \n#' and returns the resulting data frames in form of a list of data frames\n#' @param df a data frame (your dataset)\n#' @return List of data frames created by dividing orignal data\n#' @author Saurabh\n#' @details\n#' Its an internal function\nverticalSplit<-function(df){\n  if(length(names(df))>30){\n    x<-1:length(names(df))\n    n<-5\n    chunk <- function(x, n) split(x, sort(rank(x) %% n))\n    attrList<-chunk(x,n)\n    attrList1<-as.vector(unlist(attrList[1]))\n    attrList2<-as.vector(unlist(attrList[2]))\n    attrList3<-as.vector(unlist(attrList[3]))\n    attrList4<-as.vector(unlist(attrList[4]))\n    attrList5<-as.vector(unlist(attrList[5]))\n##  }\n  df1<-df[,attrList1]\n  df2<-df[,attrList2]\n  df3<-df[,attrList3]\n  df4<-df[,attrList4]\n  df5<-df[,attrList5]\n  rm(df)\n  rm(attrList1)\n  rm(attrList2)\n  rm(attrList3)\n  rm(attrList4)\n  rm(attrList5)\n  return(list(df1,df2,df3,df4,df5))\n}##\nelse{\n  return(list(df))\n}\n}\n############################################################ i/p is o/p of quantVarSumm\n\n#' Generating ScatterPlot of coefficient of variance of all quantitative variables\n#' \n#' \n#' This function generates ScatterPlot of coefficient of variance.\n#' \n#' @param quantSummary is output of quantVarSumm function from explore package\n#' @return a Scatter Plot\n#' @author Saurabh Jaju\n#' @details\n#' The input to this function is output of verticalSplit function in this package\n#' It outputs a list containing pie chart of frequency of all qualitative variables. \n#' Output must be stored in a variable.\n#' And you could access each single pie chart as outputList[1] or outputList[2]\n#' @export\n#' @import rCharts,reshape2\n#' \n\ncovarianceSPlot<-function(quantSummary){\n  summ<-data.frame(quantSummary)\n  variance<-as.numeric(summ[1,])\n  index<-1:length(variance)\n  feature<-names(summ)\n  df<-data.frame(index,variance,feature)\n  #df<-df[variance<1 & variance>-1,]\n  n1 <- rPlot(variance ~ index, data = df, color = \"feature\", type = \"point\")\n  return(n1)\n}\n\n################################################ROUGH\n# df1 <- ldply(df[1], data.frame)\n# df2 <- ldply(df[2], data.frame)\n# df3 <- ldply(df[3], data.frame)\n# df4 <- ldply(df[4], data.frame)\n# df5 <- ldply(df[5], data.frame)\n################################################################# External catering functions \n##############User allowed to call these\n#' Generates a detailed univariate statistical summary of quantitative data\n#' \n#' \n#' This function calculates various statistics of the quantitative features of input dataset\n#' \n#' @param df your data frame\n#' @return rbound vectors of input data statistics \n#' @author Saurabh Jaju\n#' @details\n#' The function first divides the dataset in managable smaller dataframes with \\code{verticalSplit}\n#' Then calculates summary statistics like\n#' Coef. of variance,minimum,maximum,standard deviation,variance, \n#' various qunatiles, mean,median,skewness,kurtosis with \\code{runSummary}\n#' it also checks if data contains NA's and number of unique values.\n#'    \n#' @export\n#' @import moments,plyr\n#' \n\nquantVarSumm<-function(df){\n  lsVS<-verticalSplit(df)\n  return(runSummary(lsVS))\n}\n\n#' Generates a detailed univariate frequency summary of qualitative features in input dataset\n#' \n#' The function first divides the dataset in managable smaller dataframes with \\code{verticalSplit}\n#' This function provides frequency count of each unique entry in each qualitative feature with \\code{runFacsummary}\n#' \n#' @param df your data frame\n#' @return list of variable name, unique entry, count(frequency)  \n#' @author Saurabh Jaju\n#' @details\n#' The function first divides the dataset in managable smaller dataframes\n#' Then calculates frequency of all unique values in all qualitative features \n#' And returns it in the form of a list\n#'    \n#' @export\n#' @import plyr\n#' \nqualiVarSumm<-function(df){\n  lsVS<-verticalSplit(df)\n  return(runFacsummary(lsVS))\n}\n\n#' Generating BarPlots \n#' \n#' The function first divides the dataset in managable smaller dataframes with \\code{verticalSplit}\n#' This function generates BarPlots of frequency of all unique values qualitative variables with \\code{barPlots}\n#' \n#' @param df your dataframe\n#' @return a list of barplots \n#' @author Saurabh Jaju\n#' @details\n#' It outputs a list containing BarPlots of frequency of all unique values qualitative variables. \n#' Output must be stored in a variable.\n#' And you could access each single bar Plot as \n#' outputList<-freqBarPlots(df)\n#' outputList[1] or outputList[2]....\n#' @export\n#' @import rCharts,reshape2\n#' \n\nfreqBarPlots<-function(df){\n  lsVS<-verticalSplit(df)\n  return(barPlots(lsVS))\n}\n\n#' Generating PieCharts \n#' The function first divides the dataset in managable smaller dataframes with \\code{verticalSplit}\n#' This function generates PieCharts of frequency of all unique values qualitative variables with \\code{piePlots}\n#' \n#' @param df your dataframe\n#' @return a list of PieCharts\n#' @author Saurabh Jaju\n#' @details\n#' It outputs a list containing PieCharts of frequency of all qualitative variables. \n#' Output must be stored in a variable.\n#' And you could access each single pie chart as \n#' outputList<-freqPiePlots(df)\n#' outputList[1] or outputList[2]....\n#' @export\n#' @import rCharts,reshape2\n#' \nfreqPiePlots<-function(df){\n  lsVS<-verticalSplit(df)\n  return(piePlots(lsVS))\n}",
    "created" : 1450784481916.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3884242557",
    "id" : "A05940EF",
    "lastKnownWriteTime" : 1451128048,
    "path" : "~/Desktop/explore/R/explore.R",
    "project_path" : "R/explore.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}